// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

exports.DiscoveryEventType = {
  ANNOUNCE: 1,
  UNANNOUNCE: 2,
}

exports.RequestMethod = {
  GET: 1,
  POST: 2,
  PUT: 3,
  DELETE: 4,
}

exports.ResponseCode = {
  OK: 1,
  NOT_FOUND: 2,
  BAD_REQUEST: 3,
  CREATED: 4,
  UPDATED: 5,
  DELETED: 6,
}

var DiscoveryEvent = (exports.DiscoveryEvent = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null,
})

var RequestEvent = (exports.RequestEvent = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null,
})

var ResponseEvent = (exports.ResponseEvent = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null,
})

defineDiscoveryEvent()
defineRequestEvent()
defineResponseEvent()

function defineDiscoveryEvent() {
  var enc = [encodings.enum, encodings.bytes, encodings.string]

  DiscoveryEvent.encodingLength = encodingLength
  DiscoveryEvent.encode = encode
  DiscoveryEvent.decode = decode

  function encodingLength(obj) {
    var length = 0
    if (!defined(obj.type)) throw new Error('type is required')
    var len = enc[0].encodingLength(obj.type)
    length += 1 + len
    if (!defined(obj.id)) throw new Error('id is required')
    var len = enc[1].encodingLength(obj.id)
    length += 1 + len
    if (!defined(obj.url)) throw new Error('url is required')
    var len = enc[2].encodingLength(obj.url)
    length += 1 + len
    return length
  }

  function encode(obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.type)) throw new Error('type is required')
    buf[offset++] = 8
    enc[0].encode(obj.type, buf, offset)
    offset += enc[0].encode.bytes
    if (!defined(obj.id)) throw new Error('id is required')
    buf[offset++] = 18
    enc[1].encode(obj.id, buf, offset)
    offset += enc[1].encode.bytes
    if (!defined(obj.url)) throw new Error('url is required')
    buf[offset++] = 26
    enc[2].encode(obj.url, buf, offset)
    offset += enc[2].encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode(buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length))
      throw new Error('Decoded message is not valid')
    var oldOffset = offset
    var obj = {
      type: 1,
      id: null,
      url: '',
    }
    var found0 = false
    var found1 = false
    var found2 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2)
          throw new Error('Decoded message is not valid')
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
          obj.type = enc[0].decode(buf, offset)
          offset += enc[0].decode.bytes
          found0 = true
          break
        case 2:
          obj.id = enc[1].decode(buf, offset)
          offset += enc[1].decode.bytes
          found1 = true
          break
        case 3:
          obj.url = enc[2].decode(buf, offset)
          offset += enc[2].decode.bytes
          found2 = true
          break
        default:
          offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineRequestEvent() {
  var enc = [encodings.enum, encodings.string, encodings.bytes]

  RequestEvent.encodingLength = encodingLength
  RequestEvent.encode = encode
  RequestEvent.decode = decode

  function encodingLength(obj) {
    var length = 0
    if (!defined(obj.method)) throw new Error('method is required')
    var len = enc[0].encodingLength(obj.method)
    length += 1 + len
    if (!defined(obj.path)) throw new Error('path is required')
    var len = enc[1].encodingLength(obj.path)
    length += 1 + len
    if (defined(obj.data)) {
      var len = enc[2].encodingLength(obj.data)
      length += 1 + len
    }
    return length
  }

  function encode(obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.method)) throw new Error('method is required')
    buf[offset++] = 8
    enc[0].encode(obj.method, buf, offset)
    offset += enc[0].encode.bytes
    if (!defined(obj.path)) throw new Error('path is required')
    buf[offset++] = 18
    enc[1].encode(obj.path, buf, offset)
    offset += enc[1].encode.bytes
    if (defined(obj.data)) {
      buf[offset++] = 26
      enc[2].encode(obj.data, buf, offset)
      offset += enc[2].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode(buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length))
      throw new Error('Decoded message is not valid')
    var oldOffset = offset
    var obj = {
      method: 1,
      path: '',
      data: null,
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error('Decoded message is not valid')
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
          obj.method = enc[0].decode(buf, offset)
          offset += enc[0].decode.bytes
          found0 = true
          break
        case 2:
          obj.path = enc[1].decode(buf, offset)
          offset += enc[1].decode.bytes
          found1 = true
          break
        case 3:
          obj.data = enc[2].decode(buf, offset)
          offset += enc[2].decode.bytes
          break
        default:
          offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineResponseEvent() {
  var enc = [encodings.enum, encodings.string, encodings.bytes]

  ResponseEvent.encodingLength = encodingLength
  ResponseEvent.encode = encode
  ResponseEvent.decode = decode

  function encodingLength(obj) {
    var length = 0
    if (defined(obj.code)) {
      var len = enc[0].encodingLength(obj.code)
      length += 1 + len
    }
    if (!defined(obj.path)) throw new Error('path is required')
    var len = enc[1].encodingLength(obj.path)
    length += 1 + len
    if (defined(obj.data)) {
      var len = enc[2].encodingLength(obj.data)
      length += 1 + len
    }
    return length
  }

  function encode(obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.code)) {
      buf[offset++] = 8
      enc[0].encode(obj.code, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (!defined(obj.path)) throw new Error('path is required')
    buf[offset++] = 18
    enc[1].encode(obj.path, buf, offset)
    offset += enc[1].encode.bytes
    if (defined(obj.data)) {
      buf[offset++] = 26
      enc[2].encode(obj.data, buf, offset)
      offset += enc[2].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode(buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length))
      throw new Error('Decoded message is not valid')
    var oldOffset = offset
    var obj = {
      code: 1,
      path: '',
      data: null,
    }
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found1) throw new Error('Decoded message is not valid')
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
          obj.code = enc[0].decode(buf, offset)
          offset += enc[0].decode.bytes
          break
        case 2:
          obj.path = enc[1].decode(buf, offset)
          offset += enc[1].decode.bytes
          found1 = true
          break
        case 3:
          obj.data = enc[2].decode(buf, offset)
          offset += enc[2].decode.bytes
          break
        default:
          offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined(val) {
  return (
    val !== null &&
    val !== undefined &&
    (typeof val !== 'number' || !isNaN(val))
  )
}
